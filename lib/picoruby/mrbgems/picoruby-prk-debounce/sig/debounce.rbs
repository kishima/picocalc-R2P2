# @sidebar prk_firmware
class DebounceBase
  DEFAULT_THRESHOLD: Integer

  @now: Integer
  @threshold: Integer
  @type: Symbol

  def self.new: () -> instance
  def threshold=: (Integer) -> void
  def set_time: () -> void
end

# @sidebar prk_firmware
class DebounceNone < DebounceBase
  def resolve: (Integer in_pin, Integer out_pin) -> bool
end

# @sidebar prk_firmware
class DebouncePerRow < DebounceBase
  @pr_table: Hash[Integer, { in_pin: Integer?, pin_val: bool, time: Integer }]

  def resolve: (Integer in_pin, Integer out_pin) -> bool
end

# @sidebar prk_firmware
class DebouncePerKey < DebounceBase
  @pk_table: Hash[Integer, { pin_val: bool, time: Integer }]

  def resolve: (Integer in_pin, Integer out_pin) -> bool
end
